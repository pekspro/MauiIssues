// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace GeneralDatabase.CompiledModel
{
    public partial class GeneralDatabaseContextModel
    {
        partial void Initialize()
        {
            var blog = BlogEntityType.Create(this);

            BlogEntityType.CreateAnnotations(blog);

            AddAnnotation("ProductVersion", "8.0.0");
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var blog = FindEntityType("GeneralDatabase.Blog")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            blog.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var generalDatabaseBlogTableBase = new TableBase("GeneralDatabase.Blog", null, relationalModel);
            var blogIdColumnBase = new ColumnBase<ColumnMappingBase>("BlogId", "INTEGER", generalDatabaseBlogTableBase);
            generalDatabaseBlogTableBase.Columns.Add("BlogId", blogIdColumnBase);
            relationalModel.DefaultTables.Add("GeneralDatabase.Blog", generalDatabaseBlogTableBase);
            var generalDatabaseBlogMappingBase = new TableMappingBase<ColumnMappingBase>(blog, generalDatabaseBlogTableBase, true);
            generalDatabaseBlogTableBase.AddTypeMapping(generalDatabaseBlogMappingBase, false);
            defaultTableMappings.Add(generalDatabaseBlogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)blogIdColumnBase, blog.FindProperty("BlogId")!, generalDatabaseBlogMappingBase);

            var tableMappings = new List<TableMapping>();
            blog.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var blogTable = new Table("Blog", null, relationalModel);
            var blogIdColumn = new Column("BlogId", "INTEGER", blogTable);
            blogTable.Columns.Add("BlogId", blogIdColumn);
            var pK_Blog = new UniqueConstraint("PK_Blog", blogTable, new[] { blogIdColumn });
            blogTable.PrimaryKey = pK_Blog;
            var pK_BlogUc = RelationalModel.GetKey(this,
                "GeneralDatabase.Blog",
                new[] { "BlogId" });
            pK_Blog.MappedKeys.Add(pK_BlogUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_BlogUc).Add(pK_Blog);
            blogTable.UniqueConstraints.Add("PK_Blog", pK_Blog);
            relationalModel.Tables.Add(("Blog", null), blogTable);
            var blogTableMapping = new TableMapping(blog, blogTable, true);
            blogTable.AddTypeMapping(blogTableMapping, false);
            tableMappings.Add(blogTableMapping);
            RelationalModel.CreateColumnMapping(blogIdColumn, blog.FindProperty("BlogId")!, blogTableMapping);
            return relationalModel.MakeReadOnly();
        }
    }
}
