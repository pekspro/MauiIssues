@using Microsoft.JSInterop;
@inject IJSRuntime JSRuntime

<style>
    .box {
        width: 40px;
        height: 40px;
    }

    .type0 {
        background-color: darkred;
    }

    .type1 {
        background-color: darkblue;
    }

    .marble {
        display: flex;
        justify-content: center;
        align-items: center;
        position: absolute;
        top: 8%;
        left: 8%;
        width: 84%;
        height: 84%;
    }

    .row0 {
        position: absolute;
        top: 0;
    }

    .row1 {
        position: absolute;
        top: 40px;
    }

    .row2 {
        position: absolute;
        top: 80px;
    }

    .row3 {
        position: absolute;
        top: 120px;
    }

    .row4 {
        position: absolute;
        top: 160px;
    }

    .row5 {
        position: absolute;
        top: 200px;
    }
</style>

<div id="dynamic">
    <div style="position: relative; border: 1px solid black; height: 240px; width: 40px;">
        @for (int col = 0; col < Width; col++)
        {
            // Running the loop like this will produce a small diff: for(int row = Height - 1; row >= 0; row--)
            for (int row = 0; row < Height; row++)
            {
                if (Grid[col, row] is not null)
                {
                    <div id="row@(row)" class="box type@(Grid[col, row]) row@(row)">
                        <img id="row-image@(row)" class="marble" src="_content/RazorClassLibrary1/marble-@(Grid[col, row] + 1).svg">
                    </div>
                }
            }
        }

        @*      // Skipping the loops above, and instead using this code will produce the exact same HTML - but with a small diff.

        @if (Grid[0, 0] is not null)
        {
        int col = 0;
        int row = 0;

        <div id="row@(row)" class="box type@(Grid[col, row]) row@(row)">
        <img id="row-image@(row)" class="marble" src="_content/RazorClassLibrary1/marble-@(Grid[col, row] + 1).svg">
        </div>
        }

        @if (Grid[0, 1] is not null)
        {
        int col = 0;
        int row = 1;

        <div id="row@(row)" class="box type@(Grid[col, row]) row@(row)">
        <img id="row-image@(row)" class="marble" src="_content/RazorClassLibrary1/marble-@(Grid[col, row] + 1).svg">
        </div>
        }

        @if (Grid[0, 2] is not null)
        {
        int col = 0;
        int row = 2;

        <div id="row@(row)"  class="box type@(Grid[col, row]) row@(row)">
        <img id="row-image@(row)" class="marble" src="_content/RazorClassLibrary1/marble-@(Grid[col, row] + 1).svg">
        </div>
        }

        @if (Grid[0, 3] is not null)
        {
        int col = 0;
        int row = 3;

        <div id="row@(row)" class="box type@(Grid[col, row]) row@(row)">
        <img id="row-image@(row)" class="marble" src="_content/RazorClassLibrary1/marble-@(Grid[col, row] + 1).svg">
        </div>
        }

        @if (Grid[0, 4] is not null)
        {
        int col = 0;
        int row = 4;

        <div id="row@(row)" class="box type@(Grid[col, row]) row@(row)">
        <img id="row-image@(row)" class="marble" src="_content/RazorClassLibrary1/marble-@(Grid[col, row] + 1).svg">
        </div>
        }

        @if (Grid[0, 5] is not null)
        {
        int col = 0;
        int row = 5;

        <div id="row@(row)" class="box type@(Grid[col, row]) row@(row)">
        <img id="row-image@(row)" class="marble" src="_content/RazorClassLibrary1/marble-@(Grid[col, row] + 1).svg">
        </div>
        }
        *@

    </div>

    <p style="padding-top: 12px;">
        <button class="btn btn-primary" @onclick="Add">Add</button>
    </p>
</div>

@if (!IsMonitoring)
{
    <p style="padding-top: 12px;">
        <button class="btn btn-primary" @onclick="StartMonitorChanges">Start monitor changes</button>
    </p>
}
else
{
    <h3>Log</h3>
    <button class="btn btn-primary" @onclick="ClearLog">Clear log</button>
}

<pre id="monitorLog">

</pre>

@code {
    List<int> Boxes = new List<int>();

    int NextType = 0;

    public const int Width = 1;
    public const int Height = 6;

    private int?[,] Grid = new int?[Width, Height];

    private void Add()
    {
        int column = 0;

        if (Grid[column, 0] is not null)
        {
            Grid = new int?[Width, Height];
        }

        int lastEmptyRow = 0;
        for (int i = 1; i < Height; i++)
        {
            if (Grid[column, i] is null)
            {
                lastEmptyRow = i;
            }
            else
            {
                break;
            }
        }

        Grid[column, lastEmptyRow] = NextType;

        NextType = (NextType + 1) % 2;
    }

    private bool IsMonitoring = false;

    private async Task StartMonitorChanges()
    {
        IsMonitoring = true;
        await JSRuntime.InvokeVoidAsync("startMonitor");
    }

    private async Task ClearLog()
    {
        await JSRuntime.InvokeVoidAsync("clearLog");
    }
}
